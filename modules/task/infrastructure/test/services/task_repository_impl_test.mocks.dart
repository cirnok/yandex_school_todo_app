// Mocks generated by Mockito 5.3.0 from annotations
// in task_infrastructure/test/services/task_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:task_domain/task_domain.dart' as _i2;
import 'package:task_infrastructure/task_infrastructure.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRevision_0 extends _i1.SmartFake implements _i2.Revision {
  _FakeRevision_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeTask_1 extends _i1.SmartFake implements _i2.Task {
  _FakeTask_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeTaskListResponse_2 extends _i1.SmartFake
    implements _i2.TaskListResponse {
  _FakeTaskListResponse_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeTaskResponse_3 extends _i1.SmartFake implements _i2.TaskResponse {
  _FakeTaskResponse_3(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [StorageTaskBackend].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageTaskBackend extends _i1.Mock
    implements _i3.StorageTaskBackend {
  MockStorageTaskBackend() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<Iterable<_i2.Task>> get taskList =>
      (super.noSuchMethod(Invocation.getter(#taskList),
              returnValue: _i4.Stream<Iterable<_i2.Task>>.empty())
          as _i4.Stream<Iterable<_i2.Task>>);
  @override
  _i2.Revision get getStorageRevision =>
      (super.noSuchMethod(Invocation.getter(#getStorageRevision),
              returnValue:
                  _FakeRevision_0(this, Invocation.getter(#getStorageRevision)))
          as _i2.Revision);
  @override
  _i4.Future<void> initialize() => (super.noSuchMethod(
      Invocation.method(#initialize, []),
      returnValue: _i4.Future<void>.value(),
      returnValueForMissingStub: _i4.Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<Iterable<_i2.Task>> getTaskList() =>
      (super.noSuchMethod(Invocation.method(#getTaskList, []),
              returnValue: _i4.Future<Iterable<_i2.Task>>.value(<_i2.Task>[]))
          as _i4.Future<Iterable<_i2.Task>>);
  @override
  _i4.Future<void> updateTaskList(Iterable<_i2.Task>? tasksFromServer) =>
      (super.noSuchMethod(Invocation.method(#updateTaskList, [tasksFromServer]),
              returnValue: _i4.Future<void>.value(),
              returnValueForMissingStub: _i4.Future<void>.value())
          as _i4.Future<void>);
  @override
  _i4.Future<void> resetLocalTaskStatesForSynchonizedTaskList(
          Iterable<_i2.UuidValue>? synchronizedTaskIdList) =>
      (super.noSuchMethod(
              Invocation.method(#resetLocalTaskStatesForSynchonizedTaskList,
                  [synchronizedTaskIdList]),
              returnValue: _i4.Future<void>.value(),
              returnValueForMissingStub: _i4.Future<void>.value())
          as _i4.Future<void>);
  @override
  _i4.Future<Iterable<_i2.Task>> getMergedTaskList(
          Iterable<_i2.Task>? tasksFromServer) =>
      (super.noSuchMethod(
              Invocation.method(#getMergedTaskList, [tasksFromServer]),
              returnValue: _i4.Future<Iterable<_i2.Task>>.value(<_i2.Task>[]))
          as _i4.Future<Iterable<_i2.Task>>);
  @override
  _i4.Future<_i2.Task> getTask(_i2.UuidValue? taskId) =>
      (super.noSuchMethod(Invocation.method(#getTask, [taskId]),
              returnValue: _i4.Future<_i2.Task>.value(
                  _FakeTask_1(this, Invocation.method(#getTask, [taskId]))))
          as _i4.Future<_i2.Task>);
  @override
  _i4.Future<_i2.Task> createTask(_i2.Task? task) =>
      (super.noSuchMethod(Invocation.method(#createTask, [task]),
              returnValue: _i4.Future<_i2.Task>.value(
                  _FakeTask_1(this, Invocation.method(#createTask, [task]))))
          as _i4.Future<_i2.Task>);
  @override
  _i4.Future<_i2.Task> editTask(_i2.Task? task) =>
      (super.noSuchMethod(Invocation.method(#editTask, [task]),
              returnValue: _i4.Future<_i2.Task>.value(
                  _FakeTask_1(this, Invocation.method(#editTask, [task]))))
          as _i4.Future<_i2.Task>);
  @override
  _i4.Future<_i2.Task> deleteTask(_i2.UuidValue? id) =>
      (super.noSuchMethod(Invocation.method(#deleteTask, [id]),
              returnValue: _i4.Future<_i2.Task>.value(
                  _FakeTask_1(this, Invocation.method(#deleteTask, [id]))))
          as _i4.Future<_i2.Task>);
  @override
  _i4.Future<void> saveStorageRevision(_i2.Revision? revision) =>
      (super.noSuchMethod(Invocation.method(#saveStorageRevision, [revision]),
              returnValue: _i4.Future<void>.value(),
              returnValueForMissingStub: _i4.Future<void>.value())
          as _i4.Future<void>);
}

/// A class which mocks [NetworkTaskBackend].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkTaskBackend extends _i1.Mock
    implements _i3.NetworkTaskBackend {
  MockNetworkTaskBackend() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.TaskListResponse> getTaskList() =>
      (super.noSuchMethod(Invocation.method(#getTaskList, []),
              returnValue: _i4.Future<_i2.TaskListResponse>.value(
                  _FakeTaskListResponse_2(
                      this, Invocation.method(#getTaskList, []))))
          as _i4.Future<_i2.TaskListResponse>);
  @override
  _i4.Future<_i2.TaskListResponse> updateTaskList(
          int? revision, _i2.TaskListRequest? request) =>
      (super.noSuchMethod(
              Invocation.method(#updateTaskList, [revision, request]),
              returnValue: _i4.Future<_i2.TaskListResponse>.value(
                  _FakeTaskListResponse_2(this,
                      Invocation.method(#updateTaskList, [revision, request]))))
          as _i4.Future<_i2.TaskListResponse>);
  @override
  _i4.Future<_i2.TaskResponse> getTask(String? taskId) => (super.noSuchMethod(
          Invocation.method(#getTask, [taskId]),
          returnValue: _i4.Future<_i2.TaskResponse>.value(
              _FakeTaskResponse_3(this, Invocation.method(#getTask, [taskId]))))
      as _i4.Future<_i2.TaskResponse>);
  @override
  _i4.Future<_i2.TaskResponse> createTask(
          int? revision, _i2.TaskRequest? request) =>
      (super.noSuchMethod(Invocation.method(#createTask, [revision, request]),
          returnValue: _i4.Future<_i2.TaskResponse>.value(_FakeTaskResponse_3(
              this,
              Invocation.method(#createTask, [revision, request])))) as _i4
          .Future<_i2.TaskResponse>);
  @override
  _i4.Future<_i2.TaskResponse> editTask(
          int? revision, String? taskId, _i2.TaskRequest? request) =>
      (super.noSuchMethod(
          Invocation.method(#editTask, [revision, taskId, request]),
          returnValue: _i4.Future<_i2.TaskResponse>.value(_FakeTaskResponse_3(
              this,
              Invocation.method(
                  #editTask, [revision, taskId, request])))) as _i4
          .Future<_i2.TaskResponse>);
  @override
  _i4.Future<_i2.TaskResponse> deleteTask(int? revision, String? taskId) =>
      (super.noSuchMethod(Invocation.method(#deleteTask, [revision, taskId]),
          returnValue: _i4.Future<_i2.TaskResponse>.value(_FakeTaskResponse_3(
              this, Invocation.method(#deleteTask, [revision, taskId])))) as _i4
          .Future<_i2.TaskResponse>);
}
